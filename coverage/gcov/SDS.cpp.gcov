        -:    0:Source:SDS.cpp
        -:    0:Graph:build/Debug/GNU-Linux-x86/SDS.gcno
        -:    0:Data:build/Debug/GNU-Linux-x86/SDS.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:///////////////////////////////////////////////////////////
        -:    2://  SDS.cpp
        -:    3://  Implementation of the Class SDS
        -:    4://  Created on:      07-Lie-2013 20:07:32
        -:    5://  Original author: Povilas
        -:    6:///////////////////////////////////////////////////////////
        -:    7:/*! \class SDS
        -:    8:    \brief A class of methods and attributes for SDS algorithm.
        -:    9: */
        -:   10:#include "SDS.h"
        -:   11:#include "ShufleObjects.h"
        -:   12:#include "Projection.h"
        -:   13:#include "PCA.h"
        -:   14:#include "SMACOF.h"
        -:   15:#include "alglib/optimization.h"
        -:   16:#include "DistanceMetrics.h"
        -:   17:#include "AdditionalMethods.h"
        -:   18:#include "ObjectMatrix.h"
        -:   19:#include <float.h>
        -:   20:#include <fstream>
        -:   21:#include <cmath>
        -:   22:
        -:   23:/** \class StaticData
        -:   24: *  \brief A class of static attributes for passing data to alglib's static method.
        -:   25: */
        -:   26:class StaticData {
        -:   27:public:
        -:   28:    static ObjectMatrix X_base;
        -:   29:    static ObjectMatrix Y_base;
        -:   30:    static ObjectMatrix X_new;
        -:   31:};
        -:   32:
        1:   33:ObjectMatrix StaticData::X_base;
        1:   34:ObjectMatrix StaticData::Y_base;
        1:   35:ObjectMatrix StaticData::X_new;
        -:   36:
    #####:   37:SDS::SDS(){
        -:   38:
    #####:   39:}
        -:   40:
        1:   41:SDS::~SDS(){
        -:   42:
        1:   43:}
        -:   44:
        1:   45:SDS::SDS(double eps, int maxIter, int dim, ProjectionEnum baseVectInitt, int nofBaseVect, DistanceMetricsEnum distMetrics){
        1:   46:    epsilon = eps;
        1:   47:    maxIteration = maxIter;
        1:   48:    d = dim;
        1:   49:    initMethod = baseVectInitt;
        1:   50:    nb = nofBaseVect;
        1:   51:    distMethod = distMetrics;
        1:   52:}
        -:   53:
        1:   54:ObjectMatrix SDS::getProjection(){
        1:   55:    int m = X.getObjectCount();
        1:   56:    int step = 0, rest = 0;
        1:   57:    StaticData::X_base = ObjectMatrix(nb);
        1:   58:    StaticData::X_new = ObjectMatrix(m - nb);
        1:   59:    StaticData::Y_base = ObjectMatrix(nb);
        1:   60:    Y_new = ObjectMatrix(m - nb);
        1:   61:    ObjectMatrix proj(m);
        -:   62:    std::vector<int> index;
        1:   63:    index.reserve(m);
        -:   64:    
        1:   65:    switch (initMethod)
        -:   66:    {
        1:   67:        case 1: proj = Projection::projectMatrix(DISPERSION, X);
        1:   68:                index = ShufleObjects::shufleObjectMatrix(BUBLESORTDSC, proj);
        1:   69:                step = m / nb;
       51:   70:                for (int i = 0; i < nb; i++)
        -:   71:                {
       50:   72:                    rest = index.at(i);
      100:   73:                    index[i] = index.at(i * step);
      100:   74:                    index[i * step] = rest;
        -:   75:                }
        -:   76:                break;
    #####:   77:        case 2: proj = Projection::projectMatrix(PCA, X);
    #####:   78:                index = ShufleObjects::shufleObjectMatrix(BUBLESORTDSC, proj);
    #####:   79:                step = m / nb;
    #####:   80:                for (int i = 0; i < nb; i++)
        -:   81:                {
    #####:   82:                    rest = index.at(i);
    #####:   83:                    index[i] = index.at(i * step);
    #####:   84:                    index[i * step] = rest;
        -:   85:                }
        -:   86:                break;
    #####:   87:        default: proj = Projection::projectMatrix(DISPERSION, X);
    #####:   88:                index = ShufleObjects::shufleObjectMatrix(RANDOM, proj);
        -:   89:                break;
        -:   90:    }
        -:   91:    
      151:   92:    for (int i = 0; i < m; i++)
        -:   93:    {
      150:   94:        if (i < nb)
       50:   95:            StaticData::X_base.addObject(X.getObjectAt(index.at(i)));
        -:   96:        else
      100:   97:            StaticData::X_new.addObject(X.getObjectAt(index.at(i)));
        -:   98:    }
        -:   99:    
        1:  100:    PCA::PCA pca(StaticData::X_base, d);
        1:  101:    StaticData::Y_base = pca.getProjection();
        1:  102:    SMACOF::SMACOF smcf(epsilon, maxIteration, d, StaticData::X_base, StaticData::Y_base);
        1:  103:    StaticData::Y_base = smcf.getProjection();
        -:  104:    
        1:  105:    Initialize();
        -:  106:    
        1:  107:    getQN();
        -:  108:    
        1:  109:    Y.clearDataObjects();
        -:  110:    
       51:  111:    for (int i = 0; i < nb; i++)
       50:  112:        Y.addObject(StaticData::Y_base.getObjectAt(i));
        -:  113:        
      101:  114:    for (int i = 0; i < m - nb; i++)
      100:  115:        Y.addObject(Y_new.getObjectAt(i));
        -:  116:    
        1:  117:    return  Y;
        -:  118:}
        -:  119:
        1:  120:void SDS::getQN(){
        1:  121:    int m = Y_new.getObjectCount();
        1:  122:    alglib::minlbfgsstate state;
        1:  123:    alglib::minlbfgsreport rep;
        1:  124:    double epsg = epsilon;
        1:  125:    double epsf = 0;
        1:  126:    double epsx = 0;
        1:  127:    alglib::ae_int_t maxits = maxIteration;
        1:  128:    alglib::real_1d_array Ynew;
        1:  129:    Ynew = AdditionalMethods::ObjectMatrixTo1DArray(Y_new);
        -:  130:    
        1:  131:    alglib::minlbfgscreate(m, Ynew, state);
        1:  132:    alglib::minlbfgssetcond(state, epsg, epsf, epsx, maxits);
        1:  133:    alglib::minlbfgsoptimize(state,  E_SDS, NULL, NULL);
        1:  134:    alglib::minlbfgsresults(state, Ynew, rep);
        -:  135:    
        1:  136:    Y_new = AdditionalMethods::alglib1DArrayToObjectMatrix(Ynew, d);
        1:  137:}
        -:  138:
    #####:  139:double SDS::getStress(){
    #####:  140:    int m = X.getObjectCount();
    #####:  141:    double dist1 = 0.0, dist2 = 0.0; 
    #####:  142:    double distX = 0.0, distY = 0.0;
        -:  143:       
    #####:  144:    for (int i = 0; i < m - nb; i++)
    #####:  145:        for (int j = i + 1; j < m - nb; j++)
        -:  146:        {
    #####:  147:            distX = DistanceMetrics::getDistance(StaticData::X_new.getObjectAt(i), StaticData::X_new.getObjectAt(j), EUCLIDEAN);
    #####:  148:            distY = DistanceMetrics::getDistance(Y_new.getObjectAt(i), Y_new.getObjectAt(j), EUCLIDEAN);
    #####:  149:            dist1 += pow(distX - distY, 2);
        -:  150:        }
        -:  151:    
    #####:  152:    for (int i = 0; i < nb; i++)
    #####:  153:        for (int j = 0; j < m - nb; j++)
        -:  154:        {
    #####:  155:            distX = DistanceMetrics::getDistance(StaticData::X_base.getObjectAt(i), StaticData::X_new.getObjectAt(j), EUCLIDEAN);
    #####:  156:            distY = DistanceMetrics::getDistance(StaticData::Y_base.getObjectAt(i), Y_new.getObjectAt(j), EUCLIDEAN);
    #####:  157:            dist2 += pow(distX - distY, 2);
        -:  158:        }
        -:  159:    
    #####:  160:    return dist1 + dist2;
        -:  161:}
        -:  162:
       21:  163:void SDS::E_SDS(const alglib::real_1d_array &Ynew, double &func, alglib::real_1d_array &grad, void *ptr)
        -:  164:{
       21:  165:    double f1 = 0.0, f2 = 0.0, distX = 0.0, distY = 0.0;
       21:  166:    int d = StaticData::Y_base.getObjectAt(0).getFeatureCount();
       21:  167:    int sm = StaticData::X_new.getObjectCount();
       21:  168:    int nb = StaticData::X_base.getObjectCount();
        -:  169:    std::vector<double> items;
       21:  170:    items.reserve(d);
     2121:  171:    DataObject dd[sm];
        -:  172:    
     2121:  173:    for (int i = 0; i < sm; i++)
        -:  174:    {
     6300:  175:        for (int j = 0; j < d; j++)
     4200:  176:            items.push_back(Ynew[d * i + j]);
     4200:  177:        dd[i] = DataObject(items);
        -:  178:        items.clear();
        -:  179:    }
        -:  180:    
     2100:  181:    for (int i = 0; i < sm - 1; i++)
        -:  182:    {   
   106029:  183:        for (int j = i + 1; j < sm; j++)
        -:  184:        {
   103950:  185:            distX = DistanceMetrics::getDistance(StaticData::X_new.getObjectAt(i), StaticData::X_new.getObjectAt(j), EUCLIDEAN);
   103950:  186:            distY = DistanceMetrics::getDistance(dd[i], dd[j], EUCLIDEAN);
   207900:  187:            f1 += std::pow(distX - distY, 2);
        -:  188:        }
        -:  189:    }    
        -:  190:    
     1071:  191:    for (int i = 0; i < nb; i++)
        -:  192:    {
   106050:  193:        for (int j = 0; j < sm; j++)
        -:  194:        {
   105000:  195:            distX = DistanceMetrics::getDistance(StaticData::X_base.getObjectAt(i), StaticData::X_new.getObjectAt(j), EUCLIDEAN);
   105000:  196:            distY = DistanceMetrics::getDistance(StaticData::Y_base.getObjectAt(i), dd[j], EUCLIDEAN);
   210000:  197:            f2 += std::pow(distX - distY, 2);
        -:  198:        }
        -:  199:    }
        -:  200:    
       21:  201:    func = f1 + f2;
        -:  202:    
     2100:  203:    for (int i = 0; i < sm - 1; i++)
        -:  204:    {
     2079:  205:        grad[i] = 0.0;
   106029:  206:        for (int j = i + 1; j < sm; j++)
        -:  207:        {
   103950:  208:            distX = DistanceMetrics::getDistance(StaticData::X_new.getObjectAt(i), StaticData::X_new.getObjectAt(j), EUCLIDEAN);
   103950:  209:            distY = DistanceMetrics::getDistance(dd[i], dd[j], EUCLIDEAN);
   103950:  210:            if (distY != 0)
   101811:  211:                grad[i] += (distX - distY) / distY;
        -:  212:        }
        -:  213:    }
        -:  214:    
     1071:  215:    for (int i = 0; i < nb; i++)
        -:  216:    {
   106050:  217:        for (int j = 0; j < sm; j++)
        -:  218:        {
   105000:  219:            distX = DistanceMetrics::getDistance(StaticData::X_base.getObjectAt(i), StaticData::X_new.getObjectAt(j), EUCLIDEAN);
   105000:  220:            distY = DistanceMetrics::getDistance(StaticData::Y_base.getObjectAt(i), dd[j], EUCLIDEAN);
   105000:  221:            if (distY != 0)
   103155:  222:                grad[j] += (distX - distY) / distY;
        -:  223:        }
     2100:  224:    }
       21:  225:}
        -:  226:
        1:  227:void SDS::Initialize()
        -:  228:{
        1:  229:    int m = X.getObjectCount();
        1:  230:    int closest_base = 0;
        1:  231:    double min_dist = DBL_MAX;
        -:  232:    double dist_ij;
        -:  233:    
      101:  234:    for (int i = 0; i < m - nb; i++)
        -:  235:    {
      100:  236:        min_dist = DBL_MAX;
      100:  237:        closest_base = 0;
     5100:  238:        for (int j = 0; j < nb; j++)
        -:  239:        {
     5000:  240:            dist_ij = DistanceMetrics::getDistance(StaticData::X_base.getObjectAt(j), StaticData::X_new.getObjectAt(i), EUCLIDEAN);
     5000:  241:            if (dist_ij < min_dist)
        -:  242:            {
      528:  243:                min_dist = dist_ij;
      528:  244:                closest_base = j;
        -:  245:            }
        -:  246:        }
      100:  247:        Y_new.addObject(StaticData::Y_base.getObjectAt(closest_base));
        -:  248:    }
        3:  249:}
