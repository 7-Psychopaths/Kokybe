        -:    0:Source:arff.cpp
        -:    0:Graph:build/Debug/GNU-Linux-x86/arff.gcno
        -:    0:Data:build/Debug/GNU-Linux-x86/arff.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "arff.h"
        -:    2:#include <fstream>
        -:    3:#include <string>
        -:    4:#include <sstream>
        -:    5:#include <stdlib.h>
        -:    6:#include <algorithm>
        -:    7:#include "DataObject.h"
        -:    8:
        1:    9:ARFF::ARFF(){
        1:   10:    data.reserve(0);
        1:   11:    attributes.reserve(0);
    #####:   12:}
        -:   13:
        6:   14:ARFF::ARFF(const char* path){   
        6:   15:    std::ifstream file (path);
        6:   16:    std::string line_from_file;
        6:   17:    std::string tmp1, tmp2;
        6:   18:    std::vector<std::string> tmp;
        6:   19:    std::vector<double> v;
        -:   20:    double d;
        6:   21:    ReadSuccess = false;
        6:   22:    if (file.is_open() != false)
        -:   23:    {
        5:   24:        ReadSuccess = true;
        5:   25:        while (std::getline(file, line_from_file))
        -:   26:        {
      923:   27:            if (line_from_file.length() == 0)
    #####:   28:                continue;
      923:   29:            std::istringstream iss(line_from_file);		
      923:   30:            std::string sub;
      923:   31:            iss >> sub;
      923:   32:            if (sub == "%")		
       40:   33:                continue;
        -:   34:            else
        -:   35:            {
      883:   36:                std::transform(sub.begin(), sub.end(), sub.begin(), ::toupper);
      883:   37:                if (sub == "@ATTRIBUTE")
        -:   38:                {
       35:   39:                    iss >> tmp1;
       35:   40:                    iss >> tmp2;
       35:   41:                    std::transform(tmp1.begin(), tmp1.end(), tmp1.begin(), ::toupper);
       35:   42:                    std::transform(tmp2.begin(), tmp2.end(), tmp2.begin(), ::toupper);
       35:   43:                    if (tmp2 == "REAL"  || tmp2 == "INTEGER")
        -:   44:                    {
       35:   45:                        attributes.push_back(tmp1);
       35:   46:                        data_types.push_back(tmp2);
        -:   47:                    }
        -:   48:                }
      848:   49:                else if (sub == "@DATA" || sub == "@RELATION")
       10:   50:                    continue;
        -:   51:                else
        -:   52:                {
      838:   53:                    tmp = split(line_from_file, ',');
      838:   54:                    if (tmp.size() != attributes.size())
        -:   55:                    {
        1:   56:                        ReadSuccess = false;
        -:   57:                        break;
        -:   58:                    }
        -:   59:                    else
        -:   60:                    {
     6696:   61:                        for (int i = 0; i < tmp.size(); i++)
        -:   62:                        {
     5859:   63:                            if (data_types[i] == "REAL" || data_types[i] == "INTEGER")
        -:   64:                            {
     5859:   65:                                if (tmp[i] == "?" || tmp[i] == "")
        -:   66:                                {
    #####:   67:                                    ReadSuccess = false;
    #####:   68:                                    break;
        -:   69:                                }
        -:   70:                                else
     5859:   71:                                    v.push_back(atof(tmp[i].c_str()));                                
        -:   72:                            }
        -:   73:                        }
      837:   74:                        if (ReadSuccess == false)
        -:   75:                            break;
        -:   76:                        else
        -:   77:                        {
      837:   78:                            data.push_back(v);
      837:   79:                            v.clear();
        -:   80:                        }
        -:   81:                    }
        -:   82:                }
        -:   83:            }
        -:   84:        }
        5:   85:        file.close();
    #####:   86:    }
    #####:   87:}
        -:   88:
        7:   89:ARFF::~ARFF(){
        7:   90:    data.clear();
        7:   91:    attributes.clear();
    #####:   92:}
        -:   93:
        4:   94:std::vector<std::string> ARFF::GetAttributes(){
        4:   95:    return attributes;
        -:   96:}
        -:   97:
        4:   98:std::vector<std::vector<double> > ARFF::GetData(){
        4:   99:    return data;
        -:  100:}
        -:  101:
      838:  102:std::vector<std::string> ARFF::split(const std::string &s, char delim, std::vector<std::string> &elems){
      838:  103:    std::stringstream ss(s);
      838:  104:    std::string item;
     7541:  105:    while (std::getline(ss, item, delim)) {
     5865:  106:        elems.push_back(item);
        -:  107:    }
      838:  108:    return elems;
        -:  109:}
        -:  110:    
      838:  111:std::vector<std::string> ARFF::split(const std::string& s, char delim){
      838:  112:    std::vector<std::string> elems;
      838:  113:    split(s, delim, elems);
    #####:  114:    return elems;
        -:  115:}
        -:  116:
        1:  117:void ARFF::WriteData(const char* path, std::vector<DataObject> data)
        -:  118:{
        1:  119:    std::ofstream file (path);
        1:  120:    int n = data.size();
        1:  121:    int k = 0;
      210:  122:    for (int i = 0; i < n; i++)
        -:  123:    {
      209:  124:        k = data.at(i).getFeatureCount();
      418:  125:        for (int j = 0; j < k - 1; j++)
      209:  126:            file<<data.at(i).getItems().at(j)<<",";
      209:  127:        file<<data.at(i).getItems().at(k - 1)<<std::endl;
        -:  128:    }
        1:  129:    file.close();
        1:  130:}
