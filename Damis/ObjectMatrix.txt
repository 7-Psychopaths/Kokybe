        -:    0:Source:ObjectMatrix.cpp
        -:    0:Graph:build/Debug/GNU-Linux-x86/ObjectMatrix.gcno
        -:    0:Data:build/Debug/GNU-Linux-x86/ObjectMatrix.gcda
        -:    0:Runs:4
        -:    0:Programs:2
        -:    1:///////////////////////////////////////////////////////////
        -:    2://  ObjectMatrix.cpp
        -:    3://  Implementation of the Class ObjectMatrix
        -:    4://  Created on:      07-Lie-2013 20:07:30
        -:    5://  Original author: Povilas
        -:    6:///////////////////////////////////////////////////////////
        -:    7:
        -:    8:#include "ObjectMatrix.h"
        -:    9:#include <vector>
        -:   10:#include "arff.h"
        -:   11:#include "DataObject.h"
        -:   12:
        4:   13:ObjectMatrix::ObjectMatrix(){
        4:   14:    DataObjects.reserve(5);    
    #####:   15:}
        -:   16:
       18:   17:ObjectMatrix::~ObjectMatrix(){
        -:   18:    //DataObjects.~vector();
       18:   19:}
        -:   20:
        -:   21:/**
        -:   22: * Constructor that reads object matrix from arff file
        -:   23: */
        2:   24:ObjectMatrix::ObjectMatrix(std::string file){
        2:   25:    fileName = file;
        2:   26:    objectCount = 0;
        2:   27:}
        -:   28:
        -:   29:/**
        -:   30: * Constructor that creates ObjectMAtrix for n objects
        -:   31: */
        1:   32:ObjectMatrix::ObjectMatrix(int count){
        1:   33:    DataObjects.reserve(count);
        1:   34:    objectCount = 0;
        1:   35:}
        -:   36:
        -:   37:
        -:   38:/**
        -:   39: * Constructor that creates ObjectMAtrix for n objects, and m features
        -:   40: */
    #####:   41:ObjectMatrix::ObjectMatrix(int m, int n){
    #####:   42:    DataObjects.reserve(m);
    #####:   43:    objectCount = 0;
    #####:   44:}
        -:   45:
        -:   46:
        -:   47:/**
        -:   48: * Constructor that creates m by n matrix that holds k features i.e. cube. Needed
        -:   49: * by SOM algorithm.
        -:   50: */
    #####:   51:ObjectMatrix::ObjectMatrix(int m, int n, int k){
        -:   52:    
    #####:   53:}
        -:   54:
        -:   55:
        -:   56:/**
        -:   57: * Adds data object to ObjectMatrix
        -:   58: */
      209:   59:void ObjectMatrix::addObject(DataObject object){
      209:   60:    DataObjects.push_back(object);
      209:   61:    objectCount = DataObjects.size();
      209:   62:}
        -:   63:
        -:   64:
        -:   65:/**
        -:   66: * Gets object at position
        -:   67: */
     1467:   68:DataObject ObjectMatrix::getObjectAt(int index){
     1467:   69:    return  DataObjects.at(index);
        -:   70:}
        -:   71:
        -:   72:
        -:   73:/**
        -:   74: * Gets object count
        -:   75: */
       13:   76:int ObjectMatrix::getObjectCount(){
       13:   77:    return objectCount;
        -:   78:}
        -:   79:
    #####:   80:std::vector<std::string> ObjectMatrix::getFeaturesTitle(){
    #####:   81:    return featureTitles;
        -:   82:}
        -:   83:
        -:   84:/**
        -:   85: * Loads (deserializes) object matrix (reads arff file into an OdjectMatrix object)
        -:   86: */
        2:   87:void ObjectMatrix::loadDataMatrix(){
        2:   88:    const char* path = fileName.c_str();
        2:   89:    ARFF file(path);
        2:   90:    if (file.ReadSuccess == true)
        -:   91:    {
        1:   92:        std::vector< std::vector<double> > data = file.GetData();  
        1:   93:        featureTitles = file.GetAttributes();
        1:   94:        std::vector< std::vector<double> >::iterator dataObjectIterator;
        1:   95:        std::vector<double>::iterator featureIterator;
        1:   96:        std::vector<double> dataObjectItems;
        -:   97:
        1:   98:        for(dataObjectIterator = data.begin();dataObjectIterator!=data.end();++dataObjectIterator)
        -:   99:        {
     1672:  100:            for(featureIterator = (*dataObjectIterator).begin();featureIterator!=(*dataObjectIterator).end();++featureIterator)
     1463:  101:                dataObjectItems.push_back(*featureIterator);
        -:  102:
      209:  103:            DataObject tmp(dataObjectItems);
      209:  104:            DataObjects.push_back(tmp);
      209:  105:            dataObjectItems.clear();
        -:  106:        }  
        1:  107:        objectCount = DataObjects.size();
        -:  108:        
        -:  109:    }
        -:  110:    else
        1:  111:        objectCount = 0;
        2:  112:}
        -:  113:
        -:  114:
    #####:  115:void ObjectMatrix::saveDataMatrix(ObjectMatrix om, const char* path){
    #####:  116:    ARFF file;
    #####:  117:    file.WriteData(path, om.DataObjects);
    #####:  118:}/*EOF*/
