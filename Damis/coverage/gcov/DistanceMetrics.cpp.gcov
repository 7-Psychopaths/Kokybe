        -:    0:Source:DistanceMetrics.cpp
        -:    0:Graph:build/Debug/GNU-Linux-x86/DistanceMetrics.gcno
        -:    0:Data:build/Debug/GNU-Linux-x86/DistanceMetrics.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*! \class DistanceMetrics
        -:    2:    \brief A class of static methods for calculating distance between DataObjects.
        -:    3: */
        -:    4:#include <cstdlib>
        -:    5:
        -:    6:#include "DistanceMetrics.h"
        -:    7:#include "DistanceMetricsEnum.h"
        -:    8:#include <cmath>
        -:    9:
        -:   10:
        -:   11:
1846624788:   12:double DistanceMetrics::getDistance(DataObject obj1, DataObject obj2, DistanceMetricsEnum dme){
1846624788:   13:    double to_return = 0.0;
1846624788:   14:    if (dme == MANHATTAN)
    #####:   15:        to_return = DistanceMetrics::getManhattan(obj1, obj2);
1846624788:   16:    else if (dme == EUCLIDEAN)
1846624788:   17:        to_return = DistanceMetrics::getEuclidean(obj1, obj2);
    #####:   18:    else if (dme == CHEBYSHEV)
    #####:   19:        to_return = DistanceMetrics::getChebyshev(obj1, obj2);
        -:   20:    
1846624788:   21:    return to_return;
        -:   22:}
        -:   23:
    #####:   24:double DistanceMetrics::getManhattan(DataObject obj1, DataObject obj2)
        -:   25:{
    #####:   26:    double to_return = 0.0;
    #####:   27:    int n = obj1.getFeatureCount();
        -:   28:    
    #####:   29:    for (int i = 0; i < n; i++)
    #####:   30:        to_return += fabs(obj1.getFeatureAt(i) - obj2.getFeatureAt(i));
        -:   31:    
    #####:   32:    return to_return;
        -:   33:}
        -:   34:
1846624788:   35:double DistanceMetrics::getEuclidean(DataObject obj1, DataObject obj2)
        -:   36:{
1846624788:   37:    double to_return = 0.0;
1846624788:   38:    double s = 0.0;
1846624788:   39:    int n = obj1.getFeatureCount();
        -:   40:    
7388021775:   41:    for (int i = 0; i < n; i++)
11082793974:   42:        s += std::pow((obj1.getFeatureAt(i) - obj2.getFeatureAt(i)), 2);
        -:   43:    
1846624788:   44:    to_return = std::sqrt(s);
        -:   45:    
1846624788:   46:    return to_return;
        -:   47:}
        -:   48:
    #####:   49:double DistanceMetrics::getChebyshev(DataObject obj1, DataObject obj2)
        -:   50:{
    #####:   51:    double to_return = -1.0;
    #####:   52:    int n = obj1.getFeatureCount();
        -:   53:    
    #####:   54:    for (int i = 0; i < n; i++)
        -:   55:    {
    #####:   56:        if (fabs(obj1.getFeatureAt(i) - obj2.getFeatureAt(i)) > to_return)
    #####:   57:            to_return = fabs(obj1.getFeatureAt(i) - obj2.getFeatureAt(i));
        -:   58:    }
        -:   59:    
    #####:   60:    return to_return;
        -:   61:}
