        -:    0:Source:Projection.cpp
        -:    0:Graph:build/Debug/GNU-Linux-x86/Projection.gcno
        -:    0:Data:build/Debug/GNU-Linux-x86/Projection.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:///////////////////////////////////////////////////////////
        -:    2://  Projection.cpp
        -:    3://  Implementation of the Class Projection
        -:    4://  Created on:      15-Spa-2013 09:54:17
        -:    5://  Original author: Mindaugas
        -:    6:///////////////////////////////////////////////////////////
        -:    7:
        -:    8:/*! \class Projection
        -:    9:    \brief A class of static methods for projecting the initial projection matrix.
        -:   10: */
        -:   11:
        -:   12:#include "DataObject.h"
        -:   13:#include "Statistics.h"
        -:   14:#include "ObjectMatrix.h"
        -:   15:#include "Projection.h"
        -:   16:#include "ProjectionEnum.h"
        -:   17:#include "PCA.h"
        -:   18:#include <cmath>
        -:   19:
    #####:   20:Projection::Projection(){
        -:   21:
    #####:   22:}
        -:   23:
    #####:   24:Projection::~Projection(){
        -:   25:
    #####:   26:}
        -:   27:
        1:   28:ObjectMatrix Projection::byDispersion(ObjectMatrix objectMatrix){
        1:   29:    int n = objectMatrix.getObjectCount();
        1:   30:    int m = objectMatrix.getObjectAt(0).getFeatureCount();
        1:   31:    int maxDispersionCol = 0;
        1:   32:    double tmp = 0.0, maxDispersion = 0.0;
        1:   33:    ObjectMatrix projection(n);
        -:   34:    std::vector<double> dispersion;
        -:   35:    std::vector<double> average;
        -:   36:    std::vector<double> feature;
        1:   37:    dispersion.reserve(m);
        1:   38:    average.reserve(m);
        -:   39:    
        5:   40:    for (int j = 0; j < m; j++)
        4:   41:        average.push_back(Statistics::getAverage(objectMatrix, j));
        -:   42:    
        5:   43:    for (int j = 0; j < m; j++)
        -:   44:    {
        4:   45:        tmp = 0.0;
      604:   46:        for (int i = 0; i < n; i++)
     1200:   47:            tmp += std::pow((objectMatrix.getObjectAt(i).getFeatureAt(j) - average.at(j)), 2);
        4:   48:        dispersion.push_back(std::sqrt((1.0 / n) * tmp));
        -:   49:    }
        -:   50:        
        1:   51:    maxDispersion = dispersion.at(0);
        4:   52:    for (int j = 1; j < m; j++)
        3:   53:        if (dispersion.at(j) > maxDispersion)
        -:   54:        {
        1:   55:            maxDispersion = dispersion.at(j);
        1:   56:            maxDispersionCol = j;
        -:   57:        }
        -:   58:    
      151:   59:    for (int i = 0; i < n; i++)
        -:   60:    {
      150:   61:        feature.push_back(objectMatrix.getObjectAt(i).getFeatureAt(maxDispersionCol));
      150:   62:        projection.addObject(DataObject(feature));
        -:   63:        feature.clear();
        -:   64:    }
        -:   65:    
    #####:   66:    return  projection;
        -:   67:}
        -:   68:
        -:   69:
    #####:   70:ObjectMatrix Projection::byPCA(ObjectMatrix objectMatrix){
    #####:   71:    int n = objectMatrix.getObjectCount();
    #####:   72:    ObjectMatrix projection(n);
        -:   73:
    #####:   74:    PCA::PCA pca(objectMatrix, 1);
    #####:   75:    projection = pca.getProjection();    
    #####:   76:    return  projection;
        -:   77:}
        -:   78:
        1:   79:ObjectMatrix Projection::projectMatrix(ProjectionEnum projEnum, ObjectMatrix objectMatrix){
        1:   80:    ObjectMatrix projection;
        -:   81:    
        1:   82:    switch (projEnum)
        -:   83:    {
        1:   84:        case 1: projection = Projection::byDispersion(objectMatrix);
        -:   85:                break;
    #####:   86:        case 2: projection = Projection::byPCA(objectMatrix);
        -:   87:                break;
    #####:   88:        default: projection = Projection::byDispersion(objectMatrix);
        -:   89:                break;
        -:   90:    }
        -:   91:         
    #####:   92:    return  projection;
        -:   93:}
        -:   94:
