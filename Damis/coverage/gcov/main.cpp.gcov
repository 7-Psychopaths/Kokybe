        -:    0:Source:main.cpp
        -:    0:Graph:build/Debug/GNU-Linux-x86/main.gcno
        -:    0:Data:build/Debug/GNU-Linux-x86/main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* 
        -:    2: * File:   main.cpp
        -:    3: * Author: mindaugas
        -:    4: *
        -:    5: * Created on August 28, 2013, 9:57 PM
        -:    6: */
        -:    7:
        -:    8:#include <cstdlib>
        -:    9:#include <vector>
        -:   10:#include <iostream>
        -:   11:#include <fstream>
        -:   12:#include "ARFF.h"
        -:   13:#include "Statistics.h"
        -:   14:#include "ShufleEnum.h"
        -:   15:#include "DistanceMetrics.h"
        -:   16:#include "ObjectMatrix.h"
        -:   17:#include "MDS.h"
        -:   18:#include "HPCMethod.h"
        -:   19:#include "DimReductionMethod.h"
        -:   20:#include "SMACOF.h"
        -:   21:#include "SAMANN.h"
        -:   22:#include "SMACOFZEIDEL.h"
        -:   23:#include "SDS.h"
        -:   24:#include "SOM.h"
        -:   25:#include "SOMMDS.h"
        -:   26:#include "DMA.h"
        -:   27:#include "mpi.h"
        -:   28:#include "Projection.h"
        -:   29:#include "PCA.h"
        -:   30:#include "AdditionalMethods.h"
        -:   31:#include <sstream>
        -:   32:
        -:   33:int AdditionalMethods::PID;    //  seed for random numbers generator
        -:   34:
        -:   35:void PrintMatrix(ObjectMatrix);                      // Y atvaizdavimas ekrane (testavimui)
        -:   36:
        1:   37:int main(int argc, char** argv) {
        -:   38:    
        1:   39:    int numOfProcs, pid, send, min_rank = 0;    // (numOfProcs) procesu kiekis
        -:   40:                                                // (pid) proceso ID
        -:   41:                                                // (send) pranesimas del Y siuntimo / nesiuntimo
        -:   42:                                                // (min_rank) proceso ID, apskaiciavusio maziausia paklaida
        -:   43:    double t_start, t_end;                      // skaiciavimu pradzia ir pabaiga
        1:   44:    ObjectMatrix Y;                             // projekcijos matrica
        -:   45:    double *stressErrors;                       // surinktu is procesu paklaidu aibe (testavimui)
        1:   46:    double receivedStress, min_stress = 0.0;    // gaunama ir maziausia paklaidos
        -:   47:    double **receiveArray, **sendArray;         // gaunama ir siunciama Y matricos
        -:   48:    double epsilon;                             // skaiciavimu tikslumas
        -:   49:    int maxIter, d;                             // (maxIter) leistinas iteraciju kiekis, (d) mazinimo dimensija
        -:   50:    
        1:   51:    epsilon = 0.001;
        1:   52:    maxIter = 100;
        1:   53:    d = 2;
        -:   54:    
        1:   55:    MPI::Init(argc, argv);
        1:   56:    pid = MPI::COMM_WORLD.Get_rank();
        1:   57:    AdditionalMethods::PID = pid;
        1:   58:    numOfProcs = MPI::COMM_WORLD.Get_size();
        -:   59:    MPI_Status status;
        -:   60:    
        1:   61:    PCA::PCA mthd1(d);
        1:   62:    PCA::PCA mthd2(1.0);
        1:   63:    SDS mthd3(epsilon, maxIter, d, DISPERSION, 50, EUCLIDEAN);
        1:   64:    SMACOFZEIDEL mthd4 (epsilon, maxIter, d, BUBLESORTDSC);
        1:   65:    SMACOFZEIDEL mthd5 (epsilon, maxIter, d, BUBLESORTASC);
        1:   66:    SMACOFZEIDEL mthd6 (epsilon, maxIter, d, RANDOM);
        1:   67:    SMACOF mthd7 (epsilon, maxIter, d);
        1:   68:    SAMANN mthd8(70, 10, 10.0, 50);
        1:   69:    DMA mthd9(epsilon, 10, d, 15);
        1:   70:    SOM mthd10(100, 3, 5);
        1:   71:    SOMMDS mthd11(epsilon, maxIter, d, 100, 3, 5);
        -:   72:    
        1:   73:    if (pid == 0)
        -:   74:    { 
        1:   75:        t_start = MPI_Wtime();
        1:   76:        if (numOfProcs == 1)
        -:   77:        {               
        1:   78:            Y = mthd1.getProjection();
        1:   79:            Y = mthd2.getProjection();
        1:   80:            Y = mthd3.getProjection();
        1:   81:            Y = mthd4.getProjection();
        1:   82:            Y = mthd5.getProjection();
        1:   83:            Y = mthd6.getProjection();
        1:   84:            Y = mthd7.getProjection();
        1:   85:            Y = mthd8.getProjection();
        1:   86:            Y = mthd9.getProjection();
        1:   87:            Y = mthd10.getProjection();
        1:   88:            Y = mthd11.getProjection();
        1:   89:            t_end = MPI_Wtime();
        -:   90:            //PrintMatrix(Y);    
        -:   91:        }
        -:   92:        else
        -:   93:        {
    #####:   94:            stressErrors = new double[numOfProcs];     // surinktu paklaidu masyvas (testavimui)       
    #####:   95:            Y = mthd7.getProjection();
    #####:   96:            int n = Y.getObjectCount();
    #####:   97:            int m = Y.getObjectAt(0).getFeatureCount();
    #####:   98:            stressErrors[0] = mthd7.getStress();
    #####:   99:            for (int i = 1; i < numOfProcs; i++)
        -:  100:            {
    #####:  101:                MPI_Recv(&receivedStress, 1, MPI_DOUBLE, i, MPI_ANY_TAG, MPI_COMM_WORLD, &status);  // priimama paklaida is kiekvieno proceso
    #####:  102:                stressErrors[i] = receivedStress;
        -:  103:            }
        -:  104:            
    #####:  105:            t_end = MPI_Wtime();
        -:  106:                        
    #####:  107:            min_stress = stressErrors[0];
    #####:  108:            for (int i = 1; i < numOfProcs; i++)
    #####:  109:                if (stressErrors[i] < min_stress)
        -:  110:                {
    #####:  111:                    min_stress = stressErrors[i];
    #####:  112:                    min_rank = i;
        -:  113:                }
        -:  114:            
    #####:  115:            if (min_rank == 0)  // jei maziausia paklaida tevinio proceso siunciamas pranesimas likusiems, kad savo Y nesiustu
        -:  116:            {
    #####:  117:                send = 0;
    #####:  118:                for (int i = 1; i < numOfProcs; i++)
    #####:  119:                    MPI_Send(&send, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
    #####:  120:                PrintMatrix(Y);
        -:  121:            }
        -:  122:            else
        -:  123:            {
    #####:  124:                for (int i = 1; i < numOfProcs; i++)
    #####:  125:                    if (i == min_rank)
        -:  126:                    {
    #####:  127:                        send = 1;
    #####:  128:                        MPI_Send(&send, 1, MPI_INT, i, 0, MPI_COMM_WORLD);  // siunciamas pranesimas, kad atsiustu Y
        -:  129:                    }
        -:  130:                    else
        -:  131:                    {
    #####:  132:                        send = 0;
    #####:  133:                        MPI_Send(&send, 1, MPI_INT, i, 0, MPI_COMM_WORLD);  // siunciamas pranesimas, kad nesiustu Y
        -:  134:                    }
        -:  135:                
    #####:  136:                receiveArray = AdditionalMethods::Array2D(n, m);
        -:  137:
    #####:  138:                MPI_Recv(&(receiveArray[0][0]), m * n, MPI_DOUBLE, min_rank, MPI_ANY_TAG, MPI_COMM_WORLD, &status);   // priimama Y
    #####:  139:                Y = AdditionalMethods::DoubleToObjectMatrix(receiveArray, n, m);
    #####:  140:                PrintMatrix(Y);
        -:  141:            }                    
        -:  142:        }
        2:  143:        std::cout<<"Calculation time: "<<t_end - t_start<<" s."<<std::endl;
        -:  144:    }
        -:  145:    else
        -:  146:    {
    #####:  147:        Y = mthd7.getProjection();
    #####:  148:        double stress = mthd7.getStress();
    #####:  149:        MPI_Send(&stress, 1, MPI_DOUBLE, 0, pid, MPI_COMM_WORLD);  // siunciama paklaida teviniam procesui
    #####:  150:        MPI_Recv(&send, 1, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status);  // priimamas pranesimas ar siusti Y
        -:  151:        
    #####:  152:        if (send == 1)          // siusti, jei send = 1, nesiusti, jei send = 0
        -:  153:        {
    #####:  154:            int n = Y.getObjectCount();
    #####:  155:            int m = Y.getObjectAt(0).getFeatureCount();
    #####:  156:            sendArray = AdditionalMethods::Array2D(n, m);
    #####:  157:            sendArray = AdditionalMethods::ObjectMatrixToDouble(Y);
    #####:  158:            MPI_Send(&(sendArray[0][0]), m * n, MPI_DOUBLE, 0, pid, MPI_COMM_WORLD);  // siunciama Y
        -:  159:        }    
        -:  160:    }    
        -:  161:    
        1:  162:    MPI_Finalize();    
        -:  163:    
        1:  164:    return 0;
        -:  165:}
        -:  166:
    #####:  167:void PrintMatrix(ObjectMatrix matrix)
        -:  168:{
    #####:  169:    int numOfObjects = matrix.getObjectCount();
    #####:  170:    int numOfFeatures = matrix.getObjectAt(0).getFeatureCount();
        -:  171:    
    #####:  172:    std::cout<<"******* Projekcijos matrica *******"<<std::endl;
    #####:  173:    for (int i = 0; i < numOfObjects; i++)
        -:  174:    {
    #####:  175:        for (int j = 0; j < numOfFeatures; j++)
    #####:  176:            std::cout<<matrix.getObjectAt(i).getFeatureAt(j)<<" ";
        -:  177:        std::cout<<std::endl;
        -:  178:    }
        2:  179:}
