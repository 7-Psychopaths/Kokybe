        -:    0:Source:SMACOF.cpp
        -:    0:Graph:build/Debug/GNU-Linux-x86/SMACOF.gcno
        -:    0:Data:build/Debug/GNU-Linux-x86/SMACOF.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:///////////////////////////////////////////////////////////
        -:    2://  SMACOF.cpp
        -:    3://  Implementation of the Class SMACOF
        -:    4://  Created on:      07-Lie-2013 20:07:32
        -:    5://  Original author: Povilas
        -:    6:///////////////////////////////////////////////////////////
        -:    7:/*! \class SMACOF
        -:    8:    \brief A class of methods and attributes for SMACOF algorithm.
        -:    9: */
        -:   10:#include "SMACOF.h"
        -:   11:#include "ShufleObjects.h"
        -:   12:#include <string>
        -:   13:#include <sstream>
        -:   14:#include <vector>
        -:   15:#include "DataObject.h"
        -:   16:#include <float.h>
        -:   17:
    #####:   18:SMACOF::SMACOF(){
        -:   19:
    #####:   20:}
        -:   21:
        6:   22:SMACOF::~SMACOF(){
        -:   23:
        6:   24:}
        -:   25:
        5:   26:SMACOF::SMACOF(double eps, int maxIter, int d):MDS(eps, maxIter, d){
        5:   27:    initializeProjectionMatrix();
    #####:   28:}
        -:   29:
        1:   30:SMACOF::SMACOF(double eps, int maxIter, int d, ObjectMatrix X_base, ObjectMatrix Y_base):MDS(eps, maxIter, d){
        1:   31:    X = X_base;
        1:   32:    Y = Y_base;
    #####:   33:}
        -:   34:
    #####:   35:SMACOF::SMACOF(ObjectMatrix initialY, double eps, int maxIter, int d):MDS(eps, maxIter, d){
    #####:   36:    Y = initialY;
    #####:   37:}
        -:   38:
    #####:   39:SMACOF::SMACOF(double eps, int maxIter, int d, ObjectMatrix initialX):MDS(eps, maxIter, d, initialX){
    #####:   40:    initializeProjectionMatrix();
    #####:   41:}
        -:   42:
        3:   43:ObjectMatrix SMACOF::getProjection(){
        3:   44:    stressErrors.reserve(maxIteration);
        3:   45:    int iteration = 0;
        3:   46:    int n = X.getObjectCount();
        3:   47:    stressErrors.push_back(getStress());
        3:   48:    double sum = 0.0;
        3:   49:    double Epsilon = DBL_MAX;
        3:   50:    ObjectMatrix Gutman;
        3:   51:    ObjectMatrix Y_new(n);
        -:   52:    std::vector<double> Y_newRow;
        3:   53:    Y_newRow.reserve(d);
        -:   54:
      174:   55:    while (iteration < maxIteration && Epsilon > epsilon)
        -:   56:    {
      171:   57:        Y_new.clearDataObjects();
      171:   58:        Gutman = getGutman();
        -:   59:
    18271:   60:        for (int i=0; i < n; i++)
        -:   61:        {
        -:   62:            Y_newRow.clear();
    54300:   63:            for (int j = 0; j < d; j++)
        -:   64:            {
    36200:   65:                sum = 0.0;
  4841700:   66:                for (int k = 0; k < n; k++)
  4805500:   67:                        sum += Gutman.getObjectAt(i).getFeatureAt(k) * Y.getObjectAt(k).getFeatureAt(j);
    36200:   68:                Y_newRow.push_back(sum / n);                
        -:   69:            }
    18100:   70:            Y_new.addObject(DataObject(Y_newRow));
        -:   71:        }
      171:   72:        Y = Y_new;
        -:   73:        
      171:   74:        stressErrors.push_back(getStress());        
      171:   75:        iteration++;
      171:   76:        Epsilon = stressErrors.at(iteration - 1) - stressErrors.at(iteration);
        -:   77:    }
        3:   78:    return Y;
        -:   79:}
        -:   80:
      175:   81:double SMACOF::getStress()
        -:   82:{
      175:   83:    return MDS::getStress();
        -:   84:}
        -:   85:
    #####:   86:ObjectMatrix SMACOF::getGutmanMatrix()
        -:   87:{
    #####:   88:    return MDS::getGutman();
        -:   89:}
