        -:    0:Source:PCA.cpp
        -:    0:Graph:build/Debug/GNU-Linux-x86/PCA.gcno
        -:    0:Data:build/Debug/GNU-Linux-x86/PCA.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:///////////////////////////////////////////////////////////
        -:    2://  PCA.cpp
        -:    3://  Implementation of the Class PCA
        -:    4://  Created on:      07-Lie-2013 20:07:31
        -:    5://  Original author: Povilas
        -:    6:///////////////////////////////////////////////////////////
        -:    7:
        -:    8:/*! \class PCA
        -:    9:    \brief A class of methods and attributes for PCA algorithm.
        -:   10: */
        -:   11:
        -:   12:#include "PCA.h"
        -:   13:#include "Statistics.h"
        -:   14:#include "alglib/dataanalysis.h"
        -:   15:
    #####:   16:PCA::PCA(){
        -:   17:
    #####:   18:}
        -:   19:
        4:   20:PCA::~PCA(){
        -:   21:
        4:   22:}
        -:   23:
        1:   24:PCA::PCA(int dim){
        1:   25:    setProjectionDimension(dim);
        1:   26:    initializeProjectionMatrix();
        1:   27:    ProjectXMatrix();
    #####:   28:}
        -:   29:
        1:   30:PCA::PCA(double disp){
        1:   31:    dispPart = disp;
        1:   32:    int n = X.getObjectCount();
        1:   33:    int m = X.getObjectAt(0).getFeatureCount();
        1:   34:    int dd = 0;
        1:   35:    PCA pca(X, m);
        1:   36:    ObjectMatrix Y_visi = pca.getProjection();
        1:   37:    this->eigValues = pca.getEigenValues();
        1:   38:    double wholeSum = 0.0, tempSum = 0.0;
        -:   39:    
        5:   40:    for (int i = 0; i < m; i++)
        4:   41:        wholeSum += eigValues(i);
        -:   42:    
        5:   43:    for (int i = 0; i < m; i++)
        -:   44:    {
        4:   45:        tempSum += eigValues(i);
        4:   46:        dd++;
        4:   47:        if ((tempSum / wholeSum) > disp)
        -:   48:            break;           
        -:   49:    }
        -:   50:    
        1:   51:    setProjectionDimension(dd);
        1:   52:    initializeProjectionMatrix();
        -:   53:
      151:   54:    for (int i = 0; i < n; i++)
        -:   55:    {
      750:   56:        for (int j = 0; j < dd; j++)
      600:   57:            Y.updateDataObject(i, j, Y_visi.getObjectAt(i).getFeatureAt(j));       
    #####:   58:    } 
    #####:   59:}
        -:   60:
    #####:   61:PCA::PCA(ObjectMatrix Xmatrix, double disp){
    #####:   62:    X = Xmatrix;
    #####:   63:    dispPart = disp;
    #####:   64:    int n = X.getObjectCount();
    #####:   65:    int m = X.getObjectAt(0).getFeatureCount();
    #####:   66:    int dd = 0;
    #####:   67:    PCA pca(X, m);
    #####:   68:    ObjectMatrix Y_visi = pca.getProjection();
    #####:   69:    this->eigValues = pca.getEigenValues();
    #####:   70:    double wholeSum = 0.0, tempSum = 0.0;
        -:   71:    
    #####:   72:    for (int i = 0; i < m; i++)
    #####:   73:        wholeSum += eigValues(i);
        -:   74:    
    #####:   75:    for (int i = 0; i < m; i++)
        -:   76:    {
    #####:   77:        tempSum += eigValues(i);
    #####:   78:        dd++;
    #####:   79:        if ((tempSum / wholeSum) > disp)
        -:   80:            break;           
        -:   81:    }
    #####:   82:    d = dd;
    #####:   83:    setProjectionDimension(d);
    #####:   84:    initializeProjectionMatrix();
        -:   85:
    #####:   86:    for (int i = 0; i < n; i++)
        -:   87:    {
    #####:   88:        for (int j = 0; j < d; j++)
    #####:   89:            Y.updateDataObject(i, j, Y_visi.getObjectAt(i).getFeatureAt(j));       
    #####:   90:    } 
    #####:   91:}
        -:   92:
        2:   93:PCA::PCA(ObjectMatrix objMatrix, int dim){ 
        2:   94:    setProjectionDimension(dim);
        2:   95:    X = objMatrix;
        2:   96:    initializeProjectionMatrix();
        2:   97:    ProjectXMatrix();
    #####:   98:}
        -:   99:
        4:  100:ObjectMatrix PCA::getProjection(){
        -:  101:    
        4:  102:    return Y; 
        -:  103:}
        -:  104:
        3:  105:void PCA::toDataType(){
        3:  106:    int m = X.getObjectCount();
        3:  107:    int n = X.getObjectAt(0).getFeatureCount();
        3:  108:    alglibX.setlength(m, n);
        -:  109:
      353:  110:    for (int i = 0; i < m; i++)
     3500:  111:        for (int j = 0; j < n; j++)
     1400:  112:            alglibX(i,j) = X.getObjectAt(i).getFeatureAt(j);
        3:  113:}
        -:  114:
        3:  115:void PCA::ProjectXMatrix()
        -:  116:{
        3:  117:    PCA::toDataType();
        3:  118:    int m = X.getObjectCount();
        3:  119:    int n = X.getObjectAt(0).getFeatureCount();
        3:  120:    double X_vid[n], tmp = 0.0;
        3:  121:    double wholeDisp = 0.0, tarpDisp = 0.0;
       15:  122:    for (int i = 0; i < n; i++)
       12:  123:        X_vid[i] = Statistics::getAverage(X, i);
        -:  124:    alglib::ae_int_t info;
        3:  125:    alglib::real_2d_array eigVectors;
        3:  126:    pcabuildbasis(alglibX, m, n, info, eigValues, eigVectors);
        -:  127:    
        3:  128:    if (info == 1)
        -:  129:    {
      353:  130:        for (int i = 0; i < m; i++)
     1350:  131:            for (int j = 0; j < d; j++)
        -:  132:            {
     1000:  133:                tmp = 0.0;
     5000:  134:                for (int k = 0; k < n; k++)
     4000:  135:                    tmp += (alglibX(i,k) - X_vid[k]) * eigVectors[k][j];
     1000:  136:                Y.updateDataObject(i, j, tmp);
        -:  137:            }  
        -:  138:        
       11:  139:        for (int i = 0; i < d; i++)
        8:  140:            tarpDisp += eigValues[i];
        -:  141:        
       15:  142:        for (int i = 0; i < n; i++)
       12:  143:            wholeDisp += eigValues[i];
        -:  144:        
        3:  145:        dispPart = tarpDisp / wholeDisp;
    #####:  146:    }
        3:  147:}
        -:  148:
    #####:  149:void PCA::fromDataType(){
    #####:  150:    int m = X.getObjectCount();
    #####:  151:    int n = X.getObjectAt(0).getFeatureCount();
        -:  152:
    #####:  153:    for (int i = 0; i < m; i++)
    #####:  154:        for (int j = 0; j < n; j++)
    #####:  155:            X.updateDataObject(i, j, alglibX(i,j));
        -:  156:
    #####:  157:}
        -:  158:
    #####:  159:int PCA::getDimension()
        -:  160:{
    #####:  161:    return d;
        -:  162:}
        -:  163:
    #####:  164:double PCA::getDispersionPart()
        -:  165:{
    #####:  166:    return dispPart;
        -:  167:}
        -:  168:
        1:  169:alglib::real_1d_array PCA::getEigenValues()
        -:  170:{
        1:  171:    return eigValues;
        -:  172:}
